// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESS_DATABASE_URL")
}

model Organization {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  email     String   @unique
  phone     String   @unique @db.VarChar(20)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("organization")
}

model Address {
  id          Int          @id @default(autoincrement())
  isActive    Boolean      @default(true)
  line1       String
  line2       String
  line3       String?
  landmark    String
  area        String
  city        String
  district    String
  state       String
  pincode     Int
  country     String
  latitude    Decimal
  longitude   Decimal
  taxIdentity TaxIdentity?
  branch      Branch?
  bontact     Contact[]
  Account     Account?     @relation(fields: [accountId], references: [id])
  accountId   Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("addresses")
}

model TaxIdentity {
  id                  Int       @id @default(autoincrement())
  isActive            Boolean   @default(true)
  //GST Related fields
  gst                 String?   @db.VarChar(55)
  gstRegistrationDate DateTime?
  gstVerified         Boolean   @default(false)
  gstAddress          Address?  @relation(fields: [gstAddressId], references: [id])
  gstAddressId        Int?      @unique
  // PAN Related fields
  pan                 String?   @db.VarChar(30)
  panVerified         Boolean   @default(false)
  // VAT Related fields
  vat                 String?   @db.VarChar(55)
  // TIN Related fields
  tin                 String?   @db.VarChar(55)
  Account             Account[]
  Branch              Branch[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@map("tax_identities")
}

model Branch {
  id             Int         @id @default(autoincrement())
  name           String      @unique @db.VarChar(255)
  isActive       Boolean     @default(true)
  email          String      @unique
  phone          String      @unique @db.VarChar(20)
  alternatePhone String      @db.VarChar(20)
  address        Address     @relation(fields: [addressId], references: [id])
  addressId      Int         @unique
  taxIdentity    TaxIdentity @relation(fields: [taxIdentityId], references: [id])
  taxIdentityId  Int
  accounts       Account[]
  contacts       Contact[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@map("branches")
}

model Contact {
  id             Int      @id @default(autoincrement())
  name           String
  email          String   @unique
  phone          String   @unique @db.VarChar(20)
  alternatePhone String   @db.VarChar(20)
  address        Address  @relation(fields: [addressId], references: [id])
  addressId      Int
  branch         Branch?  @relation(fields: [branchId], references: [id])
  branchId       Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("contacts")
}

model AccountType {
  id        Int              @id @default(autoincrement())
  name      String           @unique
  subtypes  AccountSubtype[]
  account   Account[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model AccountSubtype {
  id                   Int          @id @default(autoincrement())
  name                 String       @unique
  AccountType          AccountType? @relation(fields: [accountTypeId], references: [id])
  accountTypeId        Int?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  lastModifiedBy       User?        @relation(fields: [lastModifiedByUserId], references: [id])
  lastModifiedByUserId Int?
}

model Account {
  id              Int          @id @default(autoincrement())
  accountType     AccountType  @relation(fields: [accountTypeId], references: [id])
  accountTypeId   Int
  isVip           Boolean      @default(false)
  isKey           Boolean      @default(false)
  name            String
  registeredPhone String       @unique @db.VarChar(20)
  alternatePhone  String       @db.VarChar(20)
  email           String
  branch          Branch       @relation(fields: [branchId], references: [id])
  branchId        Int
  taxIdentityId   Int?
  taxIdentity     TaxIdentity? @relation(fields: [taxIdentityId], references: [id])
  addresses       Address[]
  parentId        Int?
  parent          Account?     @relation("ParentChildRelation", fields: [parentId], references: [id])
  childAccoutns   Account[]    @relation("ParentChildRelation")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@map("accounts")
}

model User {
  id                      Int              @id @default(autoincrement())
  username                String           @unique @db.VarChar(255)
  password                String           @db.VarChar(255)
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  modifiedAccountSubtypes AccountSubtype[]

  @@map("users")
}
