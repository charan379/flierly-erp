// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESS_DATABASE_URL")
}

model Organization {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  email     String   @unique
  phone     String   @unique @db.VarChar(20)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("organization")
}

model Address {
  id                   Int           @id @default(autoincrement())
  isDeleted            Boolean       @default(false) @map("is_deleted")
  isActive             Boolean       @default(true) @map("is_active")
  line1                String
  line2                String
  line3                String?
  landmark             String
  area                 String
  city                 String
  district             String
  state                String
  pincode              Int
  country              String
  latitude             Decimal
  longitude            Decimal
  taxIdentities        TaxIdentity[]
  branchs              Branch[]
  contacts             Contact[]
  account              Account?      @relation(fields: [accountId], references: [id])
  accountId            Int?          @map("account_id")
  // auditing fields
  createdAt            DateTime      @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt            DateTime      @updatedAt @map("updated_at") @db.Timestamptz(3)
  lastModifiedBy       User?         @relation(fields: [lastModifiedByUserId], references: [id])
  lastModifiedByUserId Int?          @map("last_modified_by_user_id")

  @@map("addresses")
}

model TaxIdentity {
  id                   Int       @id @default(autoincrement())
  isDeleted            Boolean   @default(false) @map("is_deleted")
  isActive             Boolean   @default(true) @map("is_active")
  //GST Related fields
  gst                  String?   @db.VarChar(55)
  gstRegistrationDate  DateTime? @map("gst_registration_date")
  gstVerified          Boolean   @default(false) @map("gst_verified")
  gstAddress           Address?  @relation(fields: [gstAddressId], references: [id])
  gstAddressId         Int?      @map("gst_address_id")
  // PAN Related fields
  pan                  String?   @db.VarChar(30)
  panVerified          Boolean   @default(false) @map("pan_verified")
  // VAT Related fields
  vat                  String?   @db.VarChar(55)
  // TIN Related fields
  tin                  String?   @db.VarChar(55)
  account              Account[]
  branch               Branch[]
  // auditing fields
  createdAt            DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt            DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  lastModifiedBy       User?     @relation(fields: [lastModifiedByUserId], references: [id])
  lastModifiedByUserId Int?      @map("last_modified_by_user_id")

  @@map("tax_identities")
}

model Branch {
  id                   Int         @id @default(autoincrement())
  isDeleted            Boolean     @default(false) @map("is_deleted")
  name                 String      @db.VarChar(255) // CREATE UNIQUE INDEX on "branches" ("name") where "is_deleted"= false;
  isActive             Boolean     @default(true) @map("is_active")
  email                String      @db.VarChar(255) // CREATE UNIQUE INDEX on "branches" ("email") where "is_deleted"= false;
  phone                String      @db.VarChar(20) // CREATE UNIQUE INDEX on "branches" ("phone") where "is_deleted"= false;
  alternatePhone       String      @map("alternate_phone") @db.VarChar(20)
  address              Address     @relation(fields: [addressId], references: [id])
  addressId            Int         @map("address_id")
  taxIdentity          TaxIdentity @relation(fields: [taxIdentityId], references: [id])
  taxIdentityId        Int         @map("tax_identity_id")
  accounts             Account[]
  contacts             Contact[]
  // auditing fields
  createdAt            DateTime    @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt            DateTime    @updatedAt @map("updated_at") @db.Timestamptz(3)
  lastModifiedBy       User?       @relation(fields: [lastModifiedByUserId], references: [id])
  lastModifiedByUserId Int?        @map("last_modified_by_user_id")

  @@map("branches")
}

model Contact {
  id                   Int      @id @default(autoincrement())
  isDeleted            Boolean  @default(false) @map("is_deleted")
  name                 String
  email                String
  phone                String   @db.VarChar(20)
  alternatePhone       String   @map("alternate_phone") @db.VarChar(20)
  address              Address  @relation(fields: [addressId], references: [id])
  addressId            Int      @map("address_id")
  branch               Branch?  @relation(fields: [branchId], references: [id])
  branchId             Int?     @map("branch_id")
  account              Account? @relation(fields: [accountId], references: [id])
  accountId            Int?     @map("account_id")
  // auditing fields
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt            DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)
  lastModifiedBy       User?    @relation(fields: [lastModifiedByUserId], references: [id])
  lastModifiedByUserId Int?     @map("last_modified_by_user_id")

  @@map("contacts")
}

model AccountType {
  id                   Int              @id @default(autoincrement())
  isDeleted            Boolean          @default(false) @map("is_deleted")
  name                 String           @db.VarChar(255) // CREATE UNIQUE INDEX ON "account_types" ("name") WHERE "is_deleted" = false;
  subtypes             AccountSubtype[]
  accounts             Account[]
  // auditing fields
  createdAt            DateTime         @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt            DateTime         @updatedAt @map("updated_at") @db.Timestamptz(3)
  lastModifiedBy       User?            @relation(fields: [lastModifiedByUserId], references: [id])
  lastModifiedByUserId Int?             @map("last_modified_by_user_id")

  @@map("account_types")
}

model AccountSubtype {
  id                   Int          @id @default(autoincrement())
  isDeleted            Boolean      @default(false) @map("is_deleted")
  name                 String       @db.VarChar(255) // CREATE UNIQUE INDEX ON "account_subtypes" ("name") WHERE "is_deleted"= false
  accountType          AccountType? @relation(fields: [accountTypeId], references: [id])
  accountTypeId        Int?         @map("account_type_id")
  accounts             Account[]
  // auditing fields
  createdAt            DateTime     @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt            DateTime     @updatedAt @map("updated_at") @db.Timestamptz(3)
  lastModifiedBy       User?        @relation(fields: [lastModifiedByUserId], references: [id])
  lastModifiedByUserId Int?         @map("last_modified_by_user_id")

  @@map("account_subtypes")
}

model Account {
  id                   Int            @id @default(autoincrement())
  isDeleted            Boolean        @default(false) @map("is_deleted")
  accountType          AccountType    @relation(fields: [accountTypeId], references: [id])
  accountTypeId        Int            @map("account_type_id")
  accountSubtype       AccountSubtype @relation(fields: [accountSubtypeId], references: [id])
  accountSubtypeId     Int            @map("account_subtype_id")
  isVip                Boolean        @default(false) @map("is_vip")
  isKey                Boolean        @default(false) @map("is_key")
  name                 String
  registeredPhone      String         @map("registered_phone") @db.VarChar(20) // CREATE UNIQUE INDEX ON "accounts" ("registered_phone") WHERE "is_deleted"= false
  alternatePhone       String         @map("alternate_phone") @db.VarChar(20)
  email                String         @db.VarChar(255) // CREATE UNIQUE INDEX ON "accounts" ("email") WHERE "is_deleted"= false;
  branch               Branch         @relation(fields: [branchId], references: [id])
  branchId             Int            @map("branch_id")
  taxIdentityId        Int?           @map("tax_identity_id")
  taxIdentity          TaxIdentity?   @relation(fields: [taxIdentityId], references: [id])
  contacts             Contact[]
  addresses            Address[]
  parentId             Int?           @map("parent_id")
  parent               Account?       @relation("ParentChildRelation", fields: [parentId], references: [id])
  childAccoutns        Account[]      @relation("ParentChildRelation")
  // auditing fields
  createdAt            DateTime       @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt            DateTime       @updatedAt @map("updated_at") @db.Timestamptz(3)
  lastModifiedBy       User?          @relation(fields: [lastModifiedByUserId], references: [id])
  lastModifiedByUserId Int?           @map("last_modified_by_user_id")

  @@map("accounts")
}

model User {
  id                      Int              @id @default(autoincrement())
  isDeleted               Boolean          @default(false)
  username                String           @unique @db.VarChar(255)
  password                String           @db.VarChar(255)
  modifiedAccountTypes    AccountType[]
  modifiedAccountSubtypes AccountSubtype[]
  modifiedAddresses       Address[]
  modifiedtaxIdentities   TaxIdentity[]
  modifiedBranchs         Branch[]
  modifiedContacts        Contact[]
  modifiedAccounts        Account[]

  // auditing fields
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("users")
}
