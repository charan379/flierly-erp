import { MigrationInterface, QueryRunner } from "typeorm";

export class Typecaste1740232567448 implements MigrationInterface {
    name = 'Typecaste1740232567448'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`DELETE FROM "dev"."typeorm_metadata" WHERE "type" = $1 AND "name" = $2 AND "schema" = $3`, ["VIEW","product_availability_view","dev"]);
        await queryRunner.query(`DROP VIEW "dev"."product_availability_view"`);
        await queryRunner.query(`CREATE VIEW "dev"."product_availability_view" AS SELECT "p"."id" AS "product_id", "p"."name" AS "product_name", "p"."type" AS "product_type", "pc"."id" AS "category_id", "pc"."name" AS "category_name", "psc"."id" AS "subcategory_id", "psc"."name" AS "subcategory_name", "ps"."id" AS "stock_id", "ps"."balance" AS "stock_balance", "i"."id" AS "inventory_id", "b"."id" AS "branch_id", "b"."name" AS "branch_name", "i"."inventory_type" AS "inventory_type", MAX(CASE WHEN "pp"."type" = 'sale' THEN "pp"."price" END) AS "sale_price", MAX(CASE WHEN "pp"."type" = 'maximum_sale' THEN "pp"."price" END) AS "maximum_sale_price", MAX(CASE WHEN "pp"."type" = 'minimun_sale' THEN "pp"."price" END) AS "minimun_sale_price", MAX(CASE WHEN "pp"."type" = 'purchase' THEN "pp"."price" END) AS "purchase_price", MAX(CASE WHEN "pp"."type" = 'maximum_purchase' THEN "pp"."price" END) AS "maximum_purchase_price" FROM "dev"."products" "p" INNER JOIN "dev"."product_categories" "pc" ON  "p"."category_id" = "pc"."id" AND "pc"."deleted_at" IS NULL  INNER JOIN "dev"."product_sub_categories" "psc" ON  "p"."sub_category_id" = "psc"."id" AND "psc"."deleted_at" IS NULL  LEFT JOIN "dev"."product_stocks" "ps" ON  "p"."id" = "ps"."product_id" AND "ps"."deleted_at" IS NULL  INNER JOIN "dev"."inventories" "i" ON  "ps"."inventory_id" = "i"."id" AND "i"."deleted_at" IS NULL  INNER JOIN "dev"."branches" "b" ON  "i"."branch_id" = "b"."id" AND "b"."deleted_at" IS NULL  LEFT JOIN "dev"."product_prices" "pp" ON "p"."id" = "pp"."product_id" AND "pp"."effective_date" <= CURRENT_DATE AND ("pp"."effective_date", "pp"."created_at") = (SELECT pp2.effective_date, MAX(pp2.created_at) FROM product_prices pp2 WHERE pp2.product_id = "pp"."product_id" AND pp2.type = "pp"."type" AND pp2.effective_date <= CURRENT_DATE GROUP BY pp2.effective_date) WHERE "p"."deleted_at" IS NULL GROUP BY "p"."id", "p"."name", "p"."type", "pc"."id", "pc"."name", "psc"."id", "psc"."name", "ps"."id", "ps"."balance", "i"."id", "i"."inventory_type", "b"."id", "b"."name"`);
        await queryRunner.query(`INSERT INTO "dev"."typeorm_metadata"("database", "schema", "table", "type", "name", "value") VALUES (DEFAULT, $1, DEFAULT, $2, $3, $4)`, ["dev","VIEW","product_availability_view","SELECT \"p\".\"id\" AS \"product_id\", \"p\".\"name\" AS \"product_name\", \"p\".\"type\" AS \"product_type\", \"pc\".\"id\" AS \"category_id\", \"pc\".\"name\" AS \"category_name\", \"psc\".\"id\" AS \"subcategory_id\", \"psc\".\"name\" AS \"subcategory_name\", \"ps\".\"id\" AS \"stock_id\", \"ps\".\"balance\" AS \"stock_balance\", \"i\".\"id\" AS \"inventory_id\", \"b\".\"id\" AS \"branch_id\", \"b\".\"name\" AS \"branch_name\", \"i\".\"inventory_type\" AS \"inventory_type\", MAX(CASE WHEN \"pp\".\"type\" = 'sale' THEN \"pp\".\"price\" END) AS \"sale_price\", MAX(CASE WHEN \"pp\".\"type\" = 'maximum_sale' THEN \"pp\".\"price\" END) AS \"maximum_sale_price\", MAX(CASE WHEN \"pp\".\"type\" = 'minimun_sale' THEN \"pp\".\"price\" END) AS \"minimun_sale_price\", MAX(CASE WHEN \"pp\".\"type\" = 'purchase' THEN \"pp\".\"price\" END) AS \"purchase_price\", MAX(CASE WHEN \"pp\".\"type\" = 'maximum_purchase' THEN \"pp\".\"price\" END) AS \"maximum_purchase_price\" FROM \"dev\".\"products\" \"p\" INNER JOIN \"dev\".\"product_categories\" \"pc\" ON  \"p\".\"category_id\" = \"pc\".\"id\" AND \"pc\".\"deleted_at\" IS NULL  INNER JOIN \"dev\".\"product_sub_categories\" \"psc\" ON  \"p\".\"sub_category_id\" = \"psc\".\"id\" AND \"psc\".\"deleted_at\" IS NULL  LEFT JOIN \"dev\".\"product_stocks\" \"ps\" ON  \"p\".\"id\" = \"ps\".\"product_id\" AND \"ps\".\"deleted_at\" IS NULL  INNER JOIN \"dev\".\"inventories\" \"i\" ON  \"ps\".\"inventory_id\" = \"i\".\"id\" AND \"i\".\"deleted_at\" IS NULL  INNER JOIN \"dev\".\"branches\" \"b\" ON  \"i\".\"branch_id\" = \"b\".\"id\" AND \"b\".\"deleted_at\" IS NULL  LEFT JOIN \"dev\".\"product_prices\" \"pp\" ON \"p\".\"id\" = \"pp\".\"product_id\" AND \"pp\".\"effective_date\" <= CURRENT_DATE AND (\"pp\".\"effective_date\", \"pp\".\"created_at\") = (SELECT pp2.effective_date, MAX(pp2.created_at) FROM product_prices pp2 WHERE pp2.product_id = \"pp\".\"product_id\" AND pp2.type = \"pp\".\"type\" AND pp2.effective_date <= CURRENT_DATE GROUP BY pp2.effective_date) WHERE \"p\".\"deleted_at\" IS NULL GROUP BY \"p\".\"id\", \"p\".\"name\", \"p\".\"type\", \"pc\".\"id\", \"pc\".\"name\", \"psc\".\"id\", \"psc\".\"name\", \"ps\".\"id\", \"ps\".\"balance\", \"i\".\"id\", \"i\".\"inventory_type\", \"b\".\"id\", \"b\".\"name\""]);
        await queryRunner.query(`CREATE VIEW "dev"."product_latest_prices_view" AS SELECT "p"."id" AS "product_id", "p"."name" AS "product_name", "p"."sku" AS "sku", "p"."hsn" AS "hsn", "p"."is_serialized" AS "is_serialized", "p"."is_composite" AS "is_composite", MAX(CASE WHEN "pp"."type" = 'sale' THEN "pp"."price" END) AS "sale_price", MAX(CASE WHEN "pp"."type" = 'maximum_sale' THEN "pp"."price" END) AS "maximum_sale_price", MAX(CASE WHEN "pp"."type" = 'minimun_sale' THEN "pp"."price" END) AS "minimun_sale_price", MAX(CASE WHEN "pp"."type" = 'purchase' THEN "pp"."price" END) AS "purchase_price", MAX(CASE WHEN "pp"."type" = 'maximum_purchase' THEN "pp"."price" END) AS "maximum_purchase_price" FROM "dev"."products" "p" LEFT JOIN (SELECT "pp"."type" AS "type", "pp"."product_id" AS "product_id", MAX("pp"."effective_date") AS "latest_effective_date", MAX("pp"."created_at") AS "latest_created_at" FROM "dev"."product_prices" "pp" WHERE "pp"."effective_date" <= CURRENT_DATE GROUP BY "pp"."product_id", "pp"."type") "latest_prices" ON latest_prices.product_id = "p"."id"  LEFT JOIN "dev"."product_prices" "pp" ON "pp"."product_id" = latest_prices.product_id AND "pp"."type" = latest_prices.type AND "pp"."effective_date" = latest_prices.latest_effective_date AND "pp"."created_at" = latest_prices.latest_created_at WHERE ( "p"."is_active" = true ) AND ( "p"."deleted_at" IS NULL ) GROUP BY "p"."id"`);
        await queryRunner.query(`INSERT INTO "dev"."typeorm_metadata"("database", "schema", "table", "type", "name", "value") VALUES (DEFAULT, $1, DEFAULT, $2, $3, $4)`, ["dev","VIEW","product_latest_prices_view","SELECT \"p\".\"id\" AS \"product_id\", \"p\".\"name\" AS \"product_name\", \"p\".\"sku\" AS \"sku\", \"p\".\"hsn\" AS \"hsn\", \"p\".\"is_serialized\" AS \"is_serialized\", \"p\".\"is_composite\" AS \"is_composite\", MAX(CASE WHEN \"pp\".\"type\" = 'sale' THEN \"pp\".\"price\" END) AS \"sale_price\", MAX(CASE WHEN \"pp\".\"type\" = 'maximum_sale' THEN \"pp\".\"price\" END) AS \"maximum_sale_price\", MAX(CASE WHEN \"pp\".\"type\" = 'minimun_sale' THEN \"pp\".\"price\" END) AS \"minimun_sale_price\", MAX(CASE WHEN \"pp\".\"type\" = 'purchase' THEN \"pp\".\"price\" END) AS \"purchase_price\", MAX(CASE WHEN \"pp\".\"type\" = 'maximum_purchase' THEN \"pp\".\"price\" END) AS \"maximum_purchase_price\" FROM \"dev\".\"products\" \"p\" LEFT JOIN (SELECT \"pp\".\"type\" AS \"type\", \"pp\".\"product_id\" AS \"product_id\", MAX(\"pp\".\"effective_date\") AS \"latest_effective_date\", MAX(\"pp\".\"created_at\") AS \"latest_created_at\" FROM \"dev\".\"product_prices\" \"pp\" WHERE \"pp\".\"effective_date\" <= CURRENT_DATE GROUP BY \"pp\".\"product_id\", \"pp\".\"type\") \"latest_prices\" ON latest_prices.product_id = \"p\".\"id\"  LEFT JOIN \"dev\".\"product_prices\" \"pp\" ON \"pp\".\"product_id\" = latest_prices.product_id AND \"pp\".\"type\" = latest_prices.type AND \"pp\".\"effective_date\" = latest_prices.latest_effective_date AND \"pp\".\"created_at\" = latest_prices.latest_created_at WHERE ( \"p\".\"is_active\" = true ) AND ( \"p\".\"deleted_at\" IS NULL ) GROUP BY \"p\".\"id\""]);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`DELETE FROM "dev"."typeorm_metadata" WHERE "type" = $1 AND "name" = $2 AND "schema" = $3`, ["VIEW","product_latest_prices_view","dev"]);
        await queryRunner.query(`DROP VIEW "dev"."product_latest_prices_view"`);
        await queryRunner.query(`DELETE FROM "dev"."typeorm_metadata" WHERE "type" = $1 AND "name" = $2 AND "schema" = $3`, ["VIEW","product_availability_view","dev"]);
        await queryRunner.query(`DROP VIEW "dev"."product_availability_view"`);
        await queryRunner.query(`CREATE VIEW "dev"."product_availability_view" AS SELECT "p"."id" AS "product_id", "p"."name" AS "product_name", "p"."type" AS "product_type", "pc"."id" AS "category_id", "pc"."name" AS "category_name", "psc"."id" AS "subcategory_id", "psc"."name" AS "subcategory_name", "ps"."id" AS "stock_id", "ps"."balance" AS "stock_balance", "i"."id" AS "inventory_id", "b"."id" AS "branch_id", "b"."name" AS "branch_name", "i"."inventory_type" AS "inventory_type", MAX(CASE WHEN pp.type::text = 'sale' THEN "pp"."price" END) AS "sale_price", MAX(CASE WHEN pp.type::text = 'maximum_sale' THEN "pp"."price" END) AS "maximum_sale_price", MAX(CASE WHEN pp.type::text = 'minimun_sale' THEN "pp"."price" END) AS "minimun_sale_price", MAX(CASE WHEN pp.type::text = 'purchase' THEN "pp"."price" END) AS "purchase_price", MAX(CASE WHEN pp.type::text = 'maximum_purchase' THEN "pp"."price" END) AS "maximum_purchase_price" FROM "dev"."products" "p" INNER JOIN "dev"."product_categories" "pc" ON  "p"."category_id" = "pc"."id" AND "pc"."deleted_at" IS NULL  INNER JOIN "dev"."product_sub_categories" "psc" ON  "p"."sub_category_id" = "psc"."id" AND "psc"."deleted_at" IS NULL  LEFT JOIN "dev"."product_stocks" "ps" ON  "p"."id" = "ps"."product_id" AND "ps"."deleted_at" IS NULL  INNER JOIN "dev"."inventories" "i" ON  "ps"."inventory_id" = "i"."id" AND "i"."deleted_at" IS NULL  INNER JOIN "dev"."branches" "b" ON  "i"."branch_id" = "b"."id" AND "b"."deleted_at" IS NULL  LEFT JOIN "dev"."product_prices" "pp" ON "p"."id" = "pp"."product_id" AND "pp"."effective_date" <= CURRENT_DATE AND ("pp"."effective_date", "pp"."created_at") = (SELECT pp2.effective_date, MAX(pp2.created_at) FROM product_prices pp2 WHERE pp2.product_id = "pp"."product_id" AND pp2.type::text = pp.type::text AND pp2.effective_date <= CURRENT_DATE GROUP BY pp2.effective_date) WHERE "p"."deleted_at" IS NULL GROUP BY "p"."id", "p"."name", "p"."type", "pc"."id", "pc"."name", "psc"."id", "psc"."name", "ps"."id", "ps"."balance", "i"."id", "i"."inventory_type", "b"."id", "b"."name"`);
        await queryRunner.query(`INSERT INTO "dev"."typeorm_metadata"("database", "schema", "table", "type", "name", "value") VALUES (DEFAULT, $1, DEFAULT, $2, $3, $4)`, ["dev","VIEW","product_availability_view","SELECT \"p\".\"id\" AS \"product_id\", \"p\".\"name\" AS \"product_name\", \"p\".\"type\" AS \"product_type\", \"pc\".\"id\" AS \"category_id\", \"pc\".\"name\" AS \"category_name\", \"psc\".\"id\" AS \"subcategory_id\", \"psc\".\"name\" AS \"subcategory_name\", \"ps\".\"id\" AS \"stock_id\", \"ps\".\"balance\" AS \"stock_balance\", \"i\".\"id\" AS \"inventory_id\", \"b\".\"id\" AS \"branch_id\", \"b\".\"name\" AS \"branch_name\", \"i\".\"inventory_type\" AS \"inventory_type\", MAX(CASE WHEN pp.type::text = 'sale' THEN \"pp\".\"price\" END) AS \"sale_price\", MAX(CASE WHEN pp.type::text = 'maximum_sale' THEN \"pp\".\"price\" END) AS \"maximum_sale_price\", MAX(CASE WHEN pp.type::text = 'minimun_sale' THEN \"pp\".\"price\" END) AS \"minimun_sale_price\", MAX(CASE WHEN pp.type::text = 'purchase' THEN \"pp\".\"price\" END) AS \"purchase_price\", MAX(CASE WHEN pp.type::text = 'maximum_purchase' THEN \"pp\".\"price\" END) AS \"maximum_purchase_price\" FROM \"dev\".\"products\" \"p\" INNER JOIN \"dev\".\"product_categories\" \"pc\" ON  \"p\".\"category_id\" = \"pc\".\"id\" AND \"pc\".\"deleted_at\" IS NULL  INNER JOIN \"dev\".\"product_sub_categories\" \"psc\" ON  \"p\".\"sub_category_id\" = \"psc\".\"id\" AND \"psc\".\"deleted_at\" IS NULL  LEFT JOIN \"dev\".\"product_stocks\" \"ps\" ON  \"p\".\"id\" = \"ps\".\"product_id\" AND \"ps\".\"deleted_at\" IS NULL  INNER JOIN \"dev\".\"inventories\" \"i\" ON  \"ps\".\"inventory_id\" = \"i\".\"id\" AND \"i\".\"deleted_at\" IS NULL  INNER JOIN \"dev\".\"branches\" \"b\" ON  \"i\".\"branch_id\" = \"b\".\"id\" AND \"b\".\"deleted_at\" IS NULL  LEFT JOIN \"dev\".\"product_prices\" \"pp\" ON \"p\".\"id\" = \"pp\".\"product_id\" AND \"pp\".\"effective_date\" <= CURRENT_DATE AND (\"pp\".\"effective_date\", \"pp\".\"created_at\") = (SELECT pp2.effective_date, MAX(pp2.created_at) FROM product_prices pp2 WHERE pp2.product_id = \"pp\".\"product_id\" AND pp2.type::text = pp.type::text AND pp2.effective_date <= CURRENT_DATE GROUP BY pp2.effective_date) WHERE \"p\".\"deleted_at\" IS NULL GROUP BY \"p\".\"id\", \"p\".\"name\", \"p\".\"type\", \"pc\".\"id\", \"pc\".\"name\", \"psc\".\"id\", \"psc\".\"name\", \"ps\".\"id\", \"ps\".\"balance\", \"i\".\"id\", \"i\".\"inventory_type\", \"b\".\"id\", \"b\".\"name\""]);
    }

}
